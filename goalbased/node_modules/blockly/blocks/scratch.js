/*'use strict';
goog.provide('Blockly.Blocks.test');
goog.require('Blockly.Blocks');
*/

function MENU(menu, menuItem) {
  var id = menuItem.getValue();
  // Handle special cases.
  if (this.sourceBlock_ && this.sourceBlock_.workspace) {
	if (id == Blockly.RENAME_VARIABLE_ID) {
	  // Rename variable.
	  Blockly.Variables.renameVariable(
		  this.sourceBlock_.workspace, this.variable_);
	  while(!checkVal(this.variable_.name)){
		  window.alert("變數名稱請使用中英文、數字及底線命名");
		  // console.log(variables[i])
		  Blockly.Variables.renameVariable(
			this.sourceBlock_.workspace, this.variable_);
	  }
	  return;
	} else if (id == Blockly.DELETE_VARIABLE_ID) {
	  // Delete variable.
	  this.sourceBlock_.workspace.deleteVariableById(this.variable_.getId());
	  return;
	}
  }
  // Handle unspecial case.
  this.setValue(id);
};

Blockly.Blocks['start'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("當")
        .appendField(new Blockly.FieldImage("./libs/flag.svg", 15, 15, { alt: "*", flipRtl: "FALSE" }))
        .appendField("被點擊");
    this.setNextStatement(true, null);
    this.setColour('#FFBF00');
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
//Text
Blockly.Blocks['text_s'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput(""), "TEXT");
    this.setOutput(true, "String");
    this.setColour("#6495ED");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['print'] = {
  init: function() {
    this.appendValueInput("TEXT")
        .setCheck(null)
        .appendField("說出");
    this.appendDummyInput();
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#9966FF");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['length'] = {
  init: function() {
    this.appendValueInput("VALUE")
        .setCheck(["String", "Array"])
        .appendField("字串");
    this.appendDummyInput()
        .appendField("的長度");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['join'] = {
  init: function() {
    this.appendValueInput("TEXT0")
        .setCheck(null)
        .appendField("字串組合");
    this.appendValueInput("TEXT1")
        .setCheck(null);
    this.setInputsInline(true);
    this.setOutput(true, "String");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Logic
Blockly.Blocks['if'] = {
  init: function() {
    this.appendValueInput("IF0")
        .setCheck("Boolean")
        .appendField("如果");
    this.appendDummyInput()
        .appendField("那麼");
    this.appendStatementInput("DO0")
        .setCheck(null)
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['ifelse'] = {
  init: function() {
    this.appendValueInput("IF0")
        .setCheck("Boolean")
        .appendField("如果");
    this.appendDummyInput()
        .appendField("那麼");
    this.appendStatementInput("DO0")
        .setCheck(null);
    this.appendDummyInput()
        .appendField("否則");
    this.appendStatementInput("ELSE")
        .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['boolean'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput(""), "BOOL");
    this.setOutput(true, "Boolean");
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['boolean_true'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldDropdown([["true","TRUE"], ["false","FALSE"]]), "BOOL");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['compare'] = {
  init: function() {
    this.appendValueInput("A")
        .setCheck(null);
    this.appendValueInput("B")
        .setCheck(null)
        .appendField(new Blockly.FieldDropdown([["=","EQ"], ["\u2260","NEQ"], ["\u200F<","LT"], ["\u200F\u2264","LTE"], ["\u200F>","GT"], ["\u200F\u2265","GTE"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['operation'] = {
  init: function() {
    this.appendValueInput("A")
        .setCheck("Boolean");
    this.appendValueInput("B")
        .setCheck("Boolean")
        .appendField(new Blockly.FieldDropdown([["且","AND"], ["或","OR"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['negate'] = {
  init: function() {
    this.appendValueInput("BOOL")
        .setCheck("Boolean")
    this.appendDummyInput()
        .appendField("不成立");
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Loops
Blockly.Blocks['repeat_ext'] = {
  init: function() {
    this.appendValueInput("TIMES")
        .setCheck("Number")
        .appendField("重複");
    this.appendDummyInput()
        .appendField("次");
    this.appendStatementInput("DO")
        .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['whileuntil'] = {
  init: function() {
    this.appendValueInput("BOOL")
        .setCheck("Boolean")
        .appendField("重複")
        .appendField(new Blockly.FieldDropdown([["當","WHILE"], ["直到","UNTIL"]]), "MODE");
    this.appendStatementInput("DO")
        .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
//轉換出錯
Blockly.Blocks['flow_statements'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("停止")
        .appendField(new Blockly.FieldDropdown([["全部","BREAK"], ["this script","CONTINUE"]]), "FLOW");
    this.setPreviousStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Math
Blockly.Blocks['number'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("0"), "NUM");
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['arithmetic'] = {
  init: function() {
    this.appendValueInput("A")
        .setCheck("Number");
    this.appendValueInput("B")
        .setCheck("Number")
        .appendField(new Blockly.FieldDropdown([["+","ADD"], ["-","MINUS"], ["*","MULTIPLY"], ["/","DIVIDE"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
//轉換調整(single + trig)
Blockly.Blocks['single_trig'] = {
  init: function() {
    this.appendValueInput("NUM")
        .setCheck("Number")
        .appendField(new Blockly.FieldDropdown([["平方根","ROOT"], ["絕對值","ABS"], ["-","NEG"], ["ln","LN"], ["log","LOG10"], ["e^","EXP"], ["10^","POW10"], ["sin","SIN"], ["cos","COS"], ["tan","TAN"], ["asin","ASIN"], ["acos","ACOS"], ["atan","ATAN"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['change'] = {
  init: function() {
	var a=new Blockly.FieldVariable("VAR_NAME", null, ['Var'], "Var");
    a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField("變數")
        .appendField(a, "VAR");
    this.appendValueInput("DELTA")
        .setCheck("Number")
        .appendField("改變");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FF9900");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['round'] = {
  init: function() {
    this.appendValueInput("NUM")
        .setCheck("Number")
        .appendField(new Blockly.FieldDropdown([["四捨五入數值","ROUND"], ["無條件進位","ROUNDUP"], ["無條件捨去","ROUNDDOWN"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['modulo'] = {
  init: function() {
    this.appendValueInput("DIVIDEND")
        .setCheck("Number");
    this.appendValueInput("DIVISOR")
        .setCheck("Number")
        .appendField("除以");
    this.appendDummyInput()
        .appendField("的餘數")
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['random_int'] = {
  init: function() {
    this.appendValueInput("FROM")
        .setCheck("Number")
        .appendField("隨機取數");
    this.appendValueInput("TO")
        .setCheck("Number")
        .appendField("到");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Variables(皆未轉換)
Blockly.Blocks['get'] = {
  init: function() {
	var a=new Blockly.FieldVariable("VAR_NAME", null, ['Var'], "Var");
    a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField(a, "VAR");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FF9900");
 this.setTooltip("");
 this.setHelpUrl("");
  },
  customContextMenu:function(options) {
    var option= {
    enabled:true,
    text:"重新命名變數",
    callback:function() {
      var variable = this.getField('VAR').getVariable();
      Blockly.Variables.renameVariable(current_workspace, variable);
      while(!checkVal(variable.name)){
        window.alert("變數名稱請使用中英文、數字及底線命名");
        // console.log(variables[i])
        Blockly.Variables.renameVariable(current_workspace, variable);
		}  
    }.bind(this)
    };
    options.push(option);
	var option2= {
      enabled:true,
      text:"刪除變數",
      callback:function() {
          var variable = this.getField('VAR').getVariable();
          current_workspace.deleteVariableById(variable.getId());
          current_workspace.refreshToolboxSelection();
        }.bind(this)
      };
      options.push(option2);
    }
};

Blockly.Blocks['set'] = {
  init: function() {
	var a=new Blockly.FieldVariable("VAR_NAME", null, ['Var'], "Var");
    a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField("變數")
        .appendField(a, "VAR");
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("設為");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FF9900");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
Blockly.Blocks['variables_get'] = {
  init: function() {
	var a=new Blockly.FieldVariable("VAR_NAME", null, null, "Var");
    a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField(a, "VAR");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("%{BKY_VARIABLES_HUE}");
 this.setTooltip("");
 this.setHelpUrl("");
  },
  customContextMenu:function(options) {
    var option= {
    enabled:true,
    text:"重新命名變數",
    callback:function() {
      var variable = this.getField('VAR').getVariable();
      Blockly.Variables.renameVariable(current_workspace, variable);
      while(!checkVal(variable.name)){
        window.alert("變數名稱請使用中英文、數字及底線命名");
        // console.log(variables[i])
        Blockly.Variables.renameVariable(current_workspace, variable);
    }  
    }.bind(this)
    };
    options.push(option);
	var option2= {
      enabled:true,
      text:"刪除變數",
      callback:function() {
          var variable = this.getField('VAR').getVariable();
          current_workspace.deleteVariableById(variable.getId());
          current_workspace.refreshToolboxSelection();
        }.bind(this)
      };
      options.push(option2);
    }
};

Blockly.Blocks['variables_set'] = {
  init: function() {
	var a=new Blockly.FieldVariable("VAR_NAME", null, null, "Var");
    a.onItemSelected_ = MENU;
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("將")
        .appendField(a, "VAR")
        .appendField("設為");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("%{BKY_VARIABLES_HUE}");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['variables_change'] = {
  init: function() {
	var a=new Blockly.FieldVariable("VAR_NAME", null, null, "Var");
    a.onItemSelected_ = MENU;
    this.appendValueInput("DELTA")
        .setCheck("Number")
        .appendField("將")
        .appendField(a, "VAR")
        .appendField("的值加");
    this.setInputsInline(false);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("%{BKY_VARIABLES_HUE}");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
//Lists
Blockly.Blocks['get_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendDummyInput()
		.appendField(a, "LIST");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  },
  customContextMenu:function(options) {
    var option= {
    enabled:true,
    text:"重新命名清單",
    callback:function() {
      var workspace = workspace_scratch;
      var variable = this.getField('LIST').getVariable();
      Blockly.Variables.renameVariable(workspace, variable);
	  var variables = current_workspace.getAllVariables();
        // console.log(variables)
        for(let i =0; i<variables.length; i++){
            while(!checkVal(variables[i].name)){
                window.alert("變數名稱請使用中英文、數字及底線命名");
                // console.log(variables[i])
                Blockly.Variables.renameVariable(current_workspace, variables[i]);
            }
        }
    }.bind(this)
    };
    options.push(option);
	var option2= {
      enabled:true,
      text:"刪除清單",
      callback:function() {
          var workspace = workspace_scratch;
          var variable = this.getField('LIST').getVariable();
          workspace.deleteVariableById(variable.getId());
          workspace.refreshToolboxSelection();
        }.bind(this)
      };
      options.push(option2);
    }
};

Blockly.Blocks['getIndex_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField(a, "LIST");
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("的第");
    this.appendDummyInput()
        .appendField("項")  
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['length_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField("清單")
        .appendField(a, "LIST");
    this.appendDummyInput()
        .appendField("的長度")
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['remove_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField("刪除")
        .appendField(a, "LIST");
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("的第");
    this.appendDummyInput()
        .appendField("項")
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['removeAll_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField("刪除")
        .appendField(a, "LIST");
    this.appendDummyInput()
        .appendField("的所有項目")
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['setIndex_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendDummyInput()
        .appendField("替換")
        .appendField(a, "LIST");
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("的第");
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("項為");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['insert_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("插入");
    this.appendDummyInput()
        .appendField("到")
        .appendField(a, "LIST");
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("的第");
        this.appendDummyInput()
        .appendField("項");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['add_list'] = {
  init: function() {
	var a = new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List");
	a.onItemSelected_ = MENU;
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("添加");
    this.appendDummyInput()
        .appendField("到")
        .appendField(a, "LIST");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};



//新增
Blockly.Blocks['ask'] = {
  init: function() {
    this.appendValueInput("question")
        .setCheck(null)
        .appendField("詢問");
    this.appendDummyInput()
        .appendField("並等待");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#5CB1D6");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['answer'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("詢問的答案");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#5CB1D6");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Function
Blockly.Blocks['function_create'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("function_name"), "NAME");
    // this.appendStatementInput("DO")
    //     .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null)
    this.setColour("#FF8099");
    this.setTooltip("");
    this.setHelpUrl("");
    this.inputList_ = []; 
  },
  mutationToDom: function() {
    if(this.inputList_.length==0)
    {
      return null;
    }
    var container = document.createElement('mutation');
    for(let i=0; i<this.inputList_.length; i++){
      let child_node = document.createElement("arg");
      child_node.setAttribute("name", this.inputList_[i][0]);
      child_node.setAttribute("type", this.inputList_[i][1]);
      child_node.setAttribute("text", this.inputList_[i][2]);
      container.appendChild(child_node)
    }
    return container;
  },
  domToMutation: function(xmlElement) {
    for(let i=0, list; i<xmlElement.getElementsByTagName("arg").length, list = xmlElement.getElementsByTagName("arg")[i] ;i++){
      this.inputList_[i] = [list.getAttribute("name"), list.getAttribute("type"), list.getAttribute("text")]
    }
    this.updateShape_();  // Helper function for adding/removing 2nd input.
  },
  updateShape_: function() {
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.getInput(this.inputList_[i][0])){
        
        this.removeInput(this.inputList_[i][0]);
        
      }
    }
    //this.removeInput('DO');
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.inputList_[i][1][0]=='String'){
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="text_s">'+
                '  <field name="TEXT">' + this.inputList_[i][2] +'</field>'+
                '</shadow>'
              )
            )
      }
      else if(this.inputList_[i][1][0]=='Boolean'){
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="boolean">'+
                '  <field name="BOOL">' + this.inputList_[i][2] +'</field>'+
                '</shadow>'
              )
            )
      }
      else{
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="number">'+
                '  <field name="NUM">' + this.inputList_[i][2] +'</field>'+
                '</shadow>'
              )
            )
      }
    }
  } 
};

Blockly.Blocks['function_call'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("function_name"), "NAME");
    // this.appendStatementInput("DO")
    //     .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null)
    this.setColour("#FF8099");
    this.setTooltip("");
    this.setHelpUrl("");
    this.inputList_ = []; 
  },
  mutationToDom: function() {
    if(this.inputList_.length==0)
    {
      return null;
    }
    var container = document.createElement('mutation');
    for(let i=0; i<this.inputList_.length; i++){
      let child_node = document.createElement("arg");
      child_node.setAttribute("name", this.inputList_[i][0]);
      child_node.setAttribute("type", this.inputList_[i][1]);
      child_node.setAttribute("text", this.inputList_[i][2]);
      container.appendChild(child_node)
    }
    return container;
  },
  domToMutation: function(xmlElement) {
    for(let i=0, list; i<xmlElement.getElementsByTagName("arg").length, list = xmlElement.getElementsByTagName("arg")[i] ;i++){
      this.inputList_[i] = [list.getAttribute("name"), list.getAttribute("type"), list.getAttribute("text")]
    }
    this.updateShape_();  // Helper function for adding/removing 2nd input.
  },
  updateShape_: function() {
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.getInput(this.inputList_[i][0])){
        
        this.removeInput(this.inputList_[i][0]);
        
      }
    }
    //this.removeInput('DO');
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.inputList_[i][1]=='String'){
        this.appendDummyInput()
            .appendField(this.inputList_[i][2])
      }
      else if(this.inputList_[i][1]=='Boolean'){
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="boolean">'+
                '  <field name="BOOL">' +'</field>'+
                '</shadow>'
              )
            )
      }
      else{
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="number">'+
                '  <field name="NUM">' +'</field>'+
                '</shadow>'
              )
            )
      }
    }
  } 
};

Blockly.Blocks['function_define'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("定義");
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("function_name"), "NAME");
    this.appendStatementInput("DO")
        .setCheck(null);
    this.setInputsInline(true);
    this.setColour("#FF8099");
    this.setTooltip("");
    this.setHelpUrl("");
    this.inputList_ = []; 
  },
  mutationToDom: function() {
    if(this.inputList_.length==0)
    {
      return null;
    }
    var container = document.createElement('mutation');
    for(let i=0; i<this.inputList_.length; i++){
      let child_node = document.createElement("arg");
      child_node.setAttribute("name", this.inputList_[i][0]);
      child_node.setAttribute("type", this.inputList_[i][1]);
      child_node.setAttribute("text", this.inputList_[i][2]);
      container.appendChild(child_node)
    }
    return container;
  },
  domToMutation: function(xmlElement) {
    for(let i=0, list; i<xmlElement.getElementsByTagName("arg").length, list = xmlElement.getElementsByTagName("arg")[i] ;i++){
      this.inputList_[i] = [list.getAttribute("name"), list.getAttribute("type"), list.getAttribute("text")]
    }
    this.updateShape_();  // Helper function for adding/removing 2nd input.
  },
  updateShape_: function() {
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.getInput(this.inputList_[i][0])){
        let workspace = this.workspace
        let variable = workspace.getVariablesOfType('Function')
        console.log(variable)
        this.removeInput(this.inputList_[i][0]);
        console.log(variable[0].getId())
        workspace.deleteVariableById(variable[0].getId())
      }
    }
    this.removeInput('DO');
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.inputList_[i][1] == 'String')
        this.appendDummyInput()
            .appendField(this.inputList_[i][2])
      else{
        this.appendDummyInput(this.inputList_[i][0])
            .appendField(new Blockly.FieldVariable(this.inputList_[i][2], null, ['Function'], 'Function'), this.inputList_[i][0])
      }
    }
    this.appendStatementInput("DO")
        .setCheck(null);
    console.log(this.workspace.getVariablesOfType('Function'))
  } 
  
};

Blockly.Blocks['function_variable'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldVariable("Function", null, ['Function'], "Function"), "FUNCTION");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FF8099");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['blockly_print'] = {
  init: function() {
    this.appendValueInput("TEXT")
        .setCheck(null)
        .appendField("輸出");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#5ba58c");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
