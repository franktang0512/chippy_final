/*'use strict';
goog.provide('Blockly.Blocks.test');
goog.require('Blockly.Blocks');
*/
//test
Blockly.Blocks['test'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("Hello");
    this.setOutput(true, null);
    this.setColour("#6495ED");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};


//Text
Blockly.Blocks['text_s'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput(""), "TEXT");
    this.setOutput(true, "String");
    this.setColour("#6495ED");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['print'] = {
  init: function() {
    this.appendValueInput("TEXT")
        .setCheck(null)
        .appendField("say");
    this.appendDummyInput();
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#9966FF");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['length'] = {
  init: function() {
    this.appendValueInput("VALUE")
        .setCheck(["String", "Array"])
        .appendField("length of");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['join'] = {
  init: function() {
    this.appendValueInput("TEXT0")
        .setCheck(null)
        .appendField("join");
    this.appendValueInput("TEXT1")
        .setCheck(null);
    this.setInputsInline(true);
    this.setOutput(true, "String");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Logic
Blockly.Blocks['if'] = {
  init: function() {
    this.appendValueInput("IF0")
        .setCheck("Boolean")
        .appendField("if");
    this.appendDummyInput()
        .appendField("then");
    this.appendStatementInput("DO0")
        .setCheck(null)
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['ifelse'] = {
  init: function() {
    this.appendValueInput("IF0")
        .setCheck("Boolean")
        .appendField("if");
    this.appendDummyInput()
        .appendField("then");
    this.appendStatementInput("DO0")
        .setCheck(null);
    this.appendDummyInput()
        .appendField("else");
    this.appendStatementInput("ELSE")
        .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['boolean'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput(""), "BOOL");
    this.setOutput(true, "Boolean");
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['boolean_true'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldDropdown([["true","TRUE"], ["false","FALSE"]]), "BOOL");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['compare'] = {
  init: function() {
    this.appendValueInput("A")
        .setCheck(null);
    this.appendValueInput("B")
        .setCheck(null)
        .appendField(new Blockly.FieldDropdown([["=","EQ"], ["\u2260","NEQ"], ["\u200F<","LT"], ["\u200F\u2264","LTE"], ["\u200F>","GT"], ["\u200F\u2265","GTE"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['operation'] = {
  init: function() {
    this.appendValueInput("A")
        .setCheck("Boolean");
    this.appendValueInput("B")
        .setCheck("Boolean")
        .appendField(new Blockly.FieldDropdown([["and","AND"], ["or","OR"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['negate'] = {
  init: function() {
    this.appendValueInput("BOOL")
        .setCheck("Boolean")
        .appendField("not");
    this.appendDummyInput();
    this.setOutput(true, "Boolean");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Loops
Blockly.Blocks['repeat_ext'] = {
  init: function() {
    this.appendValueInput("TIMES")
        .setCheck("Number")
        .appendField("repeat");
    this.appendStatementInput("DO")
        .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['whileuntil'] = {
  init: function() {
    this.appendValueInput("BOOL")
        .setCheck("Boolean")
        .appendField("repeat")
        .appendField(new Blockly.FieldDropdown([["while","WHILE"], ["until","UNTIL"]]), "MODE");
    this.appendStatementInput("DO")
        .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
//轉換出錯
Blockly.Blocks['flow_statements'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("stop")
        .appendField(new Blockly.FieldDropdown([["all","BREAK"], ["this script","CONTINUE"]]), "FLOW");
    this.setPreviousStatement(true, null);
    this.setColour("#FFBF00");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Math
Blockly.Blocks['number'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("0"), "NUM");
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['arithmetic'] = {
  init: function() {
    this.appendValueInput("A")
        .setCheck("Number");
    this.appendValueInput("B")
        .setCheck("Number")
        .appendField(new Blockly.FieldDropdown([["+","ADD"], ["-","MINUS"], ["*","MULTIPLY"], ["/","DIVIDE"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
//轉換調整(single + trig)
Blockly.Blocks['single_trig'] = {
  init: function() {
    this.appendValueInput("NUM")
        .setCheck("Number")
        .appendField(new Blockly.FieldDropdown([["sqrt","ROOT"], ["abs","ABS"], ["-","NEG"], ["ln","LN"], ["log","LOG10"], ["e^","EXP"], ["10^","POW10"], ["sin","SIN"], ["cos","COS"], ["tan","TAN"], ["asin","ASIN"], ["acos","ACOS"], ["atan","ATAN"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['change'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("change")
        .appendField(new Blockly.FieldVariable("item"), "VAR");
    this.appendValueInput("DELTA")
        .setCheck("Number")
        .appendField("by");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FF9900");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['round'] = {
  init: function() {
    this.appendValueInput("NUM")
        .setCheck("Number")
        .appendField(new Blockly.FieldDropdown([["round","ROUND"], ["round up","ROUNDUP"], ["round down","ROUNDDOWN"]]), "OP");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['modulo'] = {
  init: function() {
    this.appendValueInput("DIVIDEND")
        .setCheck("Number");
    this.appendValueInput("DIVISOR")
        .setCheck("Number")
        .appendField("mod");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['random_int'] = {
  init: function() {
    this.appendValueInput("FROM")
        .setCheck("Number")
        .appendField("pick random");
    this.appendValueInput("TO")
        .setCheck("Number")
        .appendField("to");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#36BF36");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Variables(皆未轉換)
Blockly.Blocks['get'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldVariable("VAR_NAME", null, ['Var'], "Var"), "VAR");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FF9900");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['set'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("set")
        .appendField(new Blockly.FieldVariable("VAR_NAME", null, ['Var'], "Var"), "VAR");
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("to");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FF9900");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Lists
Blockly.Blocks['get_list'] = {
  init: function() {
    this.appendDummyInput()
    .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['getIndex_list'] = {
  init: function() {
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("item");
    this.appendDummyInput()
        .appendField("of")
        .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['length_list'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("length of")
        .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.setInputsInline(true);
    this.setOutput(true, "Number");
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['remove_list'] = {
  init: function() {
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("delete");
    this.appendDummyInput()
        .appendField("of")
        .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['setIndex_list'] = {
  init: function() {
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("replace item");
    this.appendDummyInput()
        .appendField("of")
        .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("with");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['insert_list'] = {
  init: function() {
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("insert");
    this.appendValueInput("AT")
        .setCheck("Number")
        .appendField("at");
    this.appendDummyInput()
        .appendField("of")
        .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['add_list'] = {
  init: function() {
    this.appendValueInput("VALUE")
        .setCheck(null)
        .appendField("add");
    this.appendDummyInput()
        .appendField("to")
        .appendField(new Blockly.FieldVariable("LIST_NAME", null, ['List'], "List"), "LIST");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#FE6716");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};



//新增
Blockly.Blocks['ask'] = {
  init: function() {
    this.appendValueInput("question")
        .setCheck(null)
        .appendField("ask");
    this.appendDummyInput()
        .appendField("and wait");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#5CB1D6");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['answer'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("answer");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#5CB1D6");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

//Function
Blockly.Blocks['function_create'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("function_name"), "NAME");
    // this.appendStatementInput("DO")
    //     .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null)
    this.setColour("#FF8099");
    this.setTooltip("");
    this.setHelpUrl("");
    this.inputList_ = []; 
  },
  mutationToDom: function() {
    if(this.inputList_.length==0)
    {
      return null;
    }
    var container = document.createElement('mutation');
    for(let i=0; i<this.inputList_.length; i++){
      let child_node = document.createElement("arg");
      child_node.setAttribute("name", this.inputList_[i][0]);
      child_node.setAttribute("type", this.inputList_[i][1]);
      child_node.setAttribute("text", this.inputList_[i][2]);
      container.appendChild(child_node)
    }
    return container;
  },
  domToMutation: function(xmlElement) {
    for(let i=0, list; i<xmlElement.getElementsByTagName("arg").length, list = xmlElement.getElementsByTagName("arg")[i] ;i++){
      this.inputList_[i] = [list.getAttribute("name"), list.getAttribute("type"), list.getAttribute("text")]
    }
    this.updateShape_();  // Helper function for adding/removing 2nd input.
  },
  updateShape_: function() {
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.getInput(this.inputList_[i][0])){
        
        this.removeInput(this.inputList_[i][0]);
        
      }
    }
    //this.removeInput('DO');
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.inputList_[i][1][0]=='String'){
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="text_s">'+
                '  <field name="TEXT">' + this.inputList_[i][2] +'</field>'+
                '</shadow>'
              )
            )
      }
      else if(this.inputList_[i][1][0]=='Boolean'){
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="boolean">'+
                '  <field name="BOOL">' + this.inputList_[i][2] +'</field>'+
                '</shadow>'
              )
            )
      }
      else{
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="number">'+
                '  <field name="NUM">' + this.inputList_[i][2] +'</field>'+
                '</shadow>'
              )
            )
      }
    }
  } 
};

Blockly.Blocks['function_call'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("function_name"), "NAME");
    // this.appendStatementInput("DO")
    //     .setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null)
    this.setColour("#FF8099");
    this.setTooltip("");
    this.setHelpUrl("");
    this.inputList_ = []; 
  },
  mutationToDom: function() {
    if(this.inputList_.length==0)
    {
      return null;
    }
    var container = document.createElement('mutation');
    for(let i=0; i<this.inputList_.length; i++){
      let child_node = document.createElement("arg");
      child_node.setAttribute("name", this.inputList_[i][0]);
      child_node.setAttribute("type", this.inputList_[i][1]);
      child_node.setAttribute("text", this.inputList_[i][2]);
      container.appendChild(child_node)
    }
    return container;
  },
  domToMutation: function(xmlElement) {
    for(let i=0, list; i<xmlElement.getElementsByTagName("arg").length, list = xmlElement.getElementsByTagName("arg")[i] ;i++){
      this.inputList_[i] = [list.getAttribute("name"), list.getAttribute("type"), list.getAttribute("text")]
    }
    this.updateShape_();  // Helper function for adding/removing 2nd input.
  },
  updateShape_: function() {
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.getInput(this.inputList_[i][0])){
        
        this.removeInput(this.inputList_[i][0]);
        
      }
    }
    //this.removeInput('DO');
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.inputList_[i][1]=='String'){
        this.appendDummyInput()
            .appendField(this.inputList_[i][2])
      }
      else if(this.inputList_[i][1]=='Boolean'){
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="boolean">'+
                '  <field name="BOOL">' +'</field>'+
                '</shadow>'
              )
            )
      }
      else{
        this.appendValueInput(this.inputList_[i][0])
            .setCheck(null)
            .setShadowDom(
              Blockly.Xml.textToDom(
                '<shadow type="number">'+
                '  <field name="NUM">' +'</field>'+
                '</shadow>'
              )
            )
      }
    }
  } 
};

Blockly.Blocks['function_define'] = {
  init: function() {
    this.appendDummyInput()
        .appendField("define ");
    this.appendDummyInput()
        .appendField(new Blockly.FieldTextInput("function_name"), "NAME");
    this.appendStatementInput("DO")
        .setCheck(null);
    this.setInputsInline(true);
    this.setColour("#FF8099");
    this.setTooltip("");
    this.setHelpUrl("");
    this.inputList_ = []; 
  },
  mutationToDom: function() {
    if(this.inputList_.length==0)
    {
      return null;
    }
    var container = document.createElement('mutation');
    for(let i=0; i<this.inputList_.length; i++){
      let child_node = document.createElement("arg");
      child_node.setAttribute("name", this.inputList_[i][0]);
      child_node.setAttribute("type", this.inputList_[i][1]);
      child_node.setAttribute("text", this.inputList_[i][2]);
      container.appendChild(child_node)
    }
    return container;
  },
  domToMutation: function(xmlElement) {
    for(let i=0, list; i<xmlElement.getElementsByTagName("arg").length, list = xmlElement.getElementsByTagName("arg")[i] ;i++){
      this.inputList_[i] = [list.getAttribute("name"), list.getAttribute("type"), list.getAttribute("text")]
    }
    this.updateShape_();  // Helper function for adding/removing 2nd input.
  },
  updateShape_: function() {
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.getInput(this.inputList_[i][0])){
        let workspace = this.workspace
        let variable = workspace.getVariablesOfType('Function')
        console.log(variable)
        this.removeInput(this.inputList_[i][0]);
        console.log(variable[0].getId())
        workspace.deleteVariableById(variable[0].getId())
      }
    }
    this.removeInput('DO');
    for(var i = 0; i<this.inputList_.length; i++)
    {
      if(this.inputList_[i][1] == 'String')
        this.appendDummyInput()
            .appendField(this.inputList_[i][2])
      else{
        this.appendDummyInput(this.inputList_[i][0])
            .appendField(new Blockly.FieldVariable(this.inputList_[i][2], null, ['Function'], 'Function'), this.inputList_[i][0])
      }
    }
    this.appendStatementInput("DO")
        .setCheck(null);
    console.log(this.workspace.getVariablesOfType('Function'))
  } 
  
};

Blockly.Blocks['function_variable'] = {
  init: function() {
    this.appendDummyInput()
        .appendField(new Blockly.FieldVariable("Function", null, ['Function'], "Function"), "FUNCTION");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour("#FF8099");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};

Blockly.Blocks['blockly_print'] = {
  init: function() {
    this.appendValueInput("TEXT")
        .setCheck(null)
        .appendField("print");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour("#5ba58c");
 this.setTooltip("");
 this.setHelpUrl("");
  }
};
